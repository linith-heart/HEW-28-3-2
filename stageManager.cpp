//=============================================================================
//
// ステージ・イベント管理[stagemManager.cpp]
// Author : 宋彦霖
//
//=============================================================================
#include "stageManager.h"	// ベース

#include "loadEnmDB.h"		// 敵登場関連
#include "target.h"			// 敵登場関連

#include "player.h"			// ゲームオーバー条件関連

#include "fade.h"			// シーンチェンジ関連
#include "wait.h"			// シーンチェンジ関連
#include "game.h"			// シーンチェンジ関連

#include "check hit.h"

//*****************************************************************************
// 列挙型
//*****************************************************************************
enum
{
	STAGESTATUS_NORMAL = 0,		// ステージ状態：通常
	STAGESTATUS_GAMEOVER,		// ステージ状態：ゲームオーバー
	STAGESTATUS_CLAER,			// ステージ状態：クリア

};

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define INIT_TIMER			(0)			// 初期化
#define STAGE01_DURATION	(7380)			// ステージ01の長さ

#define WAIT_GAMEOVER		(FADE_TIME)		// ゲームオーバーの待ち時間
#define WAIT_CLEAR			(FADE_TIME)		// ゲームクリアの待ち時間

//*****************************************************************************
// 構造体定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
void GameOverCheck(void);
void GameOver(void);
void StageClearCheck(void);
void StageClear(void);

void EnemyOnStage(void);

void UninitStage(int mode);

//*****************************************************************************
// グローバル変数
//*****************************************************************************
int STAGE;				// ステージ番号
int StageTimer;			// ステージタイマー
int StageStatus;		// ステージ状態

//=============================================================================
// ステージの設定
//=============================================================================
void SetStage(int no)
{
	STAGE = no;
}

//=============================================================================
// 初期化
// int no：ステージ番号
//=============================================================================
void InitStage(int no)
{
	StageStatus = STAGESTATUS_NORMAL;	// ステージ状態：通常	
	StageTimer = INIT_TIMER;
	STAGE = no;

	switch (STAGE)
	{
	case (STAGE_TU) :
		break;

	case (STAGE_01) :
		// エネミーデータベースの読み込む
		LoadEnemyDB();

		break;
	}

}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateStage(void)
{
	switch (StageStatus)
	{
	// ステージ状態：通常
	case STAGESTATUS_NORMAL:
		GameOverCheck();			//	ゲームオーバーチェック
		StageClearCheck();			//	ステージクリアチェック
		break;
		
	// ステージ状態：ゲームオーバー	
	case STAGESTATUS_GAMEOVER:
		GameOver();					// ゲームオーバー処理
		break;

	// ステージ状態：ステージクリア
	case STAGESTATUS_CLAER:
		StageClear();				// ステージクリア処理
		break;
	}
	
	// 敵登場
	EnemyOnStage();

	//
	UpdateCheckHit();

	// タイマーのカウントアップ
	StageTimer++;

}

//=============================================================================
// ステージ番号の取得
//=============================================================================
int GetStage(void)
{
	return STAGE;
}

//=============================================================================
// ステージタイマーの設定
//=============================================================================
void SetStageTimer(int time)
{
	StageTimer = time;
}

//=============================================================================
// ステージクリアチェック
// ・条件：プレイヤーのHPがゼロになる
//=============================================================================
void GameOverCheck(void)
{
	// ポインターの設定
	PLAYER *player = GetPlayer(0);

	// 条件：プレイヤーのHPがゼロになる
	if (player->HP <= 0)
	{
		// ステージ状態：ゲームオーバー
		StageStatus = STAGESTATUS_GAMEOVER;

		// 待ち時間の設定
		SetWait(0, int(WAIT_GAMEOVER));
	}
}

//=============================================================================
// ゲームオーバー処理
// ・演出：フェード
// ・処理：シーンチェンジ
//=============================================================================
void GameOver(void)
{
	// カウントダウン終了前、フェード処理
	if (GetWait(0) == FADE_TIME)
	{
		SetFade(FADE_OUT);
	}

	CountDownWait(0);

	// カウントダウン終了、モード切り替え
	if (GetWait(0) == 0)
	{
		InitWaitAppoint(0);				// タイマーの初期化
		SetMode(MODE_OVER, MODE_NULL);	// モードチェンジ（応急処置）

	}

}

//=============================================================================
// ステージクリアチェック
// ・条件：終点に辿り着く
//=============================================================================
void StageClearCheck(void)
{
	// 条件：終点に辿り着く
	if (StageTimer >= STAGE01_DURATION)
	{
		// ステージ状態：ゲームオーバー
		StageStatus = STAGESTATUS_CLAER;

		// 待ち時間の設定
		SetWait(0, int(WAIT_CLEAR));
	}
}

//=============================================================================
// ステージクリア処理
// ・演出：フェード
// ・処理：シーンチェンジ
//=============================================================================
void StageClear(void)
{
	// カウントダウン終了前、フェード処理
	if (GetWait(0) == FADE_TIME)
	{
		SetFade(FADE_OUT);
	}

	CountDownWait(0);

	// カウントダウン終了、モード切り替え
	if (GetWait(0) == 0)
	{
		InitWaitAppoint(0);		// タイマーの初期化
		SetMode(MODE_RESULT, MODE_NULL);	// モードチェンジ（応急処置）
	}
}

//=============================================================================
// 終了処理、次のモードに移行
// ・int mode：次のモードの番号
//=============================================================================
void UninitStage(int mode)
{
	InitWaitAppoint(0);		// タイマーの初期化
	UninitGame(mode);

	SetMode(MODE_TITLE, MODE_GAME);		// モードチェンジ（応急処置）

}
//=============================================================================
// 敵登場
//=============================================================================
void EnemyOnStage(void)
{
	// ポインターの初期化
	TARGET *tgt = GetTarget(0);

	for (int i = 0; i < TARGET_MAX; i++, tgt++)
	{
		if (StageTimer == tgt->apr)
		{
			tgt->mesh.use = true;		// 稼働し始める
			tgt->use = true;			// lockon関連

		}
	}
}
